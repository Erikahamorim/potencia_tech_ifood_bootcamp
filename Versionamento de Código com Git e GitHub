Versionamento de Código com Git e GitHub

=> O que é versionamento de código?
    Sistemas de controle de versão - controlam as versões de um arquivo ao longo do tempo

git init - cria um repositório localmente dentro da pasta de interesse
git remote add origin (nome do servidor/url onde será conectado) - cria o repositório remoto

git status - status dos arquivos na "área de preparo" do repositório local

got clone + url do repositório remoto + nome-do-diretório-local(opcional)- clona o repositório localmente
	=> git clone + url --branch "nome_branch_desejada" --single-branch (clone de uma branch específica)

git commit - grava as alterações no repositório
git pull - puxa as alterações do repositório remoto para o local (git fetch + git merge)
git push - "empurra" as alterações do repositório local para o repositório remoto

git fetch ( ? pesquisar) 

git stash - salva "na memória" uma alteração, enviando para uma nova branch.

GitHub - repositório remoto onde é armazenado o código


=> linguiagem de marcação simples - similar ao HTML 
		- readme.so => editar online para o Read Me do GitHub
		
		
		
git commit - exemplo
	commit ffba2bf3486e01c4e2f860e4fb92800e948fce67 (hash do commit - identificação que garante a igualdade entre as inforamções dos repositórios locais e remotos
	
echo nome_diretório > .gitignore (ignora o diretório para commits)

.gitkeep => arquivo incluído em diretórios vazios para que o git reconheça o mesmo - "convenção"


Casos de exceções

-- git innit em uma pasta errada => basta remover o .git de dentro da pasta desejada
	rm -rf .git (remove forçadamente)
	
	
-- desfazer alterações nos arquivos do diretório local
	git status mostra a alteração indesejada
	git restore => restaura a última versão do arquivos visualizado acima ("alterado")
	
	Desfazendo Alteração 2m15s
	
	
--alterar a mensagem do último commit
	git commit --amend -m "mensagem do commit"
	git commit --amend => editar manualmente a mensagem
	
--desfazer os commit pos ponto de interesse (commit hash / id)
	git reset --soft id_do_commit => vai desfazer tudo pós o commit informado
	git reset --mixed id_do_commit => desfaz os commits, incluindo os arquivos no add .git
	git reset --hard id_do_commit => desfaz os comits posteriories e apaga os arquivos
	
--rastrear as alterações
	git reflog - retorna todas as alterações realizadas no repositório


=> Branch - ramificaçaõ do seu projeto (como se fosse uma nova "versão" independente do contexto originalg)

-- criar uma nova branch e alterar para a nova
	git checkout -b "nome_da_branch"

--voltar para a branch main
	git checkout

--conferir os commits de todas as branchs
	git branch -v

-- mesclar branchs no main => traś os commits. A branch mesclada continua existindo.
	git merge "nome_branch"

--excluir uma branch 
	git branch -d "nome_branch"


=> pesquisar convenções branchs e commits



Conflitos de branchs

=> conflitos de merge (alterações concorrentes)
	- mesma linha de código, por exemplo.
	- quando as informações do último commit entre o repositório remoto e repositório local forem conflitantes o terminal irá retornar
	- é necessário corrigir manualmente, escolhendo qual alteração será mantida.
	
	
README.md => md de markdown - sintaxe de escrita do Readme

